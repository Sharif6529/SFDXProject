#!groovy
import groovy.json.JsonSlurperClassic
node {
	
//Building with Paramters
	properties(
	  [
		parameters(
		[string(defaultValue: '', name: 'SANDBOX', description: 'Please choose dev, qa, uat, or prod sandboxes'),
		  ]
		)
	  ]
	)
	
def BUILD_NUMBER=env.BUILD_NUMBER
def RUN_ARTIFACT_DIR="tests/${BUILD_NUMBER}"
def ORG_USRNAME = "izlam91@gmail.com"
def JWT_KEY_CRED_ID = "1ef3587c-ad3b-4b69-aae6-4435d943f9ec"
def fpac1_Key = "3MVG9dZJodJWITSuSzLjqzmhdWcW5iTuMeo29En4XPKMYD0ww0gTCJGk5Tz39JOLG4ZmdoyX8jz3OvK4LjK2R"
	
	stage ('Checkout Source') {
		checkout scm
	}

stage('CICD Branch and Enviorment Verification') {
		script { 
		if (env.BRANCH_NAME != 'master' && env.BRANCH_NAME != 'Feature1' && env.BRANCH_NAME != 'Feature2' ) {
			echo 'Branch is not a CI baseline branch - Build Canceled'
			currentBuild.result = "UNSTABLE"
			
		} else if ("${params.SANDBOX}" != 'Sandbox1' && "${params.SANDBOX}" != 'Sandbox2' )  {
			echo 'The identified sandbox is not supported by this pipeline - Build Canceled'
			currentBuild.result = "UNSTABLE"
		
		} else {
//Capture the changes in the Jenkins Server and Leverage for deployment
stage('Create Delta Directory') {
                script {
	// defining variables to be used
                    def Delta_Dir = "SF_Deploy" //New Directory
                    sh "rm -rf ${Delta_Dir}" //Delete Previous Directory
                    def root_folder_changes = "force-app/main/default" //Set focus on where chnages will happen
                    def folders = ["objects", "aura", "lwc","email"] // Creating list to handle subfolders
                    def folders_complete = folders.collect { "force-app/main/default/$it" } //Collecting all subfolders
	// List all files from the git diff commannd
                    List<String> source_changed = sh(
                        returnStdout: true,
                        script: "git diff --name-only HEAD~").split("\\r?\\n") //splits at the end of each file change from git diff command
	//For loop through all files that chnaged
                    for (int i = 0; i < source_changed.size(); i++) {
                        echo "source file changed: ${source_changed[i]}"
	//Handling class files to get thier respective xml
                        if (source_changed[i].endsWith("cls")) {
                            File file_source_changed_cls = new File(source_changed[i])
                            String absolutePath=source_changed[i]
                            def parent_cls = absolutePath.split("/")[-2]
                            sh "mkdir -p ${Delta_Dir}/${parent_cls}"
                            sh "cp -r '${source_changed[i]}' ${Delta_Dir}/${parent_cls}"
                            sh "cp -r '${source_changed[i]}-meta.xml' ${Delta_Dir}/${parent_cls}"
	//Handling component files to get thier respective xml
                        } else if (source_changed[i].endsWith("component")) {
                            File file_source_changed_comp = new File(source_changed[i])
                            String absolutePath=source_changed[i]
                            def parent_component = absolutePath.split("/")[-2]
                            sh "mkdir -p ${Delta_Dir}/${parent_component}"
                            sh "cp -r '${source_changed[i]}' ${Delta_Dir}/${parent_component}"
                            sh "cp -r '${source_changed[i]}-meta.xml' ${Delta_Dir}/${parent_component}"
                        }
	//Handling page files to get thier respective xml
			if (source_changed[i].endsWith("page")) {
                            File file_source_changed_page = new File(source_changed[i])
							String absolutePath=source_changed[i]
                            def parent_page = absolutePath.split("/")[-2]
                            sh "mkdir -p ${Delta_Dir}/${parent_page}"
                            sh "cp -r '${source_changed[i]}' ${Delta_Dir}/${parent_page}"
                            sh "cp -r '${source_changed[i]}-meta.xml' ${Delta_Dir}/${parent_page}"
	//Handling crt files to get thier respective xml
                        } else if (source_changed[i].endsWith("crt")) {
                            File file_source_changed_crt = new File(source_changed[i])
							String absolutePath=source_changed[i]
                            def parent_crt = absolutePath("/")[-2]
                            sh "mkdir -p ${Delta_Dir}/${parent_crt}"
                            sh "cp -r '${source_changed[i]}' ${Delta_Dir}/${parent_crt}"
                            sh "cp -r '${source_changed[i]}-meta.xml' ${Delta_Dir}/${parent_crt}"
			}
	//Handling Assets files to get thier respective xml
			if (source_changed[i].endsWith("asset")) {
                            File file_source_changed_asset = new File(source_changed[i])
							String absolutePath=source_changed[i]
                            def parent_asset = absolutePath.split("/")[-2]
                            sh "mkdir -p ${Delta_Dir}/${parent_asset}"
                            sh "cp -r '${source_changed[i]}' ${Delta_Dir}/${parent_asset}"
                            sh "cp -r '${source_changed[i]}-meta.xml' ${Delta_Dir}/${parent_asset}"
			}else if (source_changed[i].endsWith("trigger")) {
                            File file_source_changed_trigger = new File(source_changed[i])
							String absolutePath=source_changed[i]
                            def parent_trigger = absolutePath("/")[-2]
                            sh "mkdir -p ${Delta_Dir}/${parent_trigger}"
                            sh "cp -r '${source_changed[i]}' ${Delta_Dir}/${parent_trigger}"
                            sh "cp -r '${source_changed[i]}-meta.xml' ${Delta_Dir}/${parent_trigger}"
			}
                        results = folders_complete.findAll {source_changed[i].startsWith(it).each{}}
	//Using a list to copy all contents subfolders along with parent
            if (results) {
		        echo "resultsall= ${results}"		
                results = results[0]
			    echo "resultstest= ${results}"	
                results_dirname = results.split("/")[-1]
		        echo "results_dirname = ${results_dirname}"			
		          
			if(results_dirname == 'objects
				String absolutePath=source_changed[i]
		        def objects_subfolder_test = source_changed[i].split(results + "/")	
			    echo "objects_subfolder_test= ${objects_subfolder_test}"	
			    def objects_subfolder = source_changed[i].split(results + "/")[-1].split("/")[0]
			    echo "objects_subfolder= ${objects_subfolder}"	
			    def objects_subfolder_fields = source_changed[i].split(results + "/")[-1].split("/")[1]
		            echo "objects_subfolder_fileds= ${objects_subfolder_fields}"
			    def objects_subfolder_fields_xml = source_changed[i].split(results + "/")[-1].split("/")[2]
			    echo "objects_subfolder_fields_xml = ${objects_subfolder_fields_xml}"	
			    def objects_subfolder_full_path  = results + "/" + objects_subfolder
			    echo "objects_subfolder_full_path = ${objects_subfolder_full_path}"
			    sh "mkdir -p ${Delta_Dir}/${results_dirname}/${objects_subfolder}"				
			    echo "objects_subfolder_obgxml= ${objects_subfolder_full_path}/${objects_subfolder}.object-meta.xml"				
			    sh "cp -r '${objects_subfolder_full_path}/${objects_subfolder}.object-meta.xml' ${Delta_Dir}/${results_dirname}/${objects_subfolder}"			    
			    sh "mkdir -p ${Delta_Dir}/${results_dirname}/${objects_subfolder}/${objects_subfolder_fields}"
			    sh "cp -r '${objects_subfolder_full_path}/${objects_subfolder_fields}/${objects_subfolder_fields_xml}' ${Delta_Dir}/${results_dirname}/${objects_subfolder}/${objects_subfolder_fields}" 	
			}else{
			    def objects_subfolder_test = source_changed[i].split(results + "/")	
			    echo "objects_subfolder_test= ${objects_subfolder_test}"		
                            def objects_subfolder = source_changed[i].split(results + "/")[-1].split("/")[0]
                            echo "objects_subfolder= ${objects_subfolder}"
                            def objects_subfolder_full_path = results + "/" + objects_subfolder
                            echo "objects_subfolder_full_path= ${objects_subfolder_full_path}"
                            sh "mkdir -p ${Delta_Dir}/${results_dirname}"
                            sh "cp -r '${objects_subfolder_full_path}' ${Delta_Dir}/${results_dirname}"
			}	
	//Handling all other files that have no relation and is a folder to file relationship with focus .xml
                        } else if (source_changed[i].endsWith("xml")) {
                            File file_source_changed = new File(source_changed[i])
                            def parent = file_source_changed.getParent().split("/")[-1]
                            sh "mkdir -p ${Delta_Dir}/${parent}"
                            sh "cp -r '${source_changed[i]}' ${Delta_Dir}/${parent}"
                        }
                    }
                }
        }
			
//Authorize to Sandbox 
stage ('Build and Deploy') {
	withCredentials([file(credentialsId: JWT_KEY_CRED_ID, variable: 'jwt_key_file')]) {
if ("${params.SANDBOX}" == 'Sandbox1') {
		//Autorize to SandBox
		echo "Sanbox = ${params.SANDBOX} Deploycode to Sandbox1"
		echo "Building from Last Commit on Branch ${env.BRANCH_NAME}"
		rc = sh returnStatus: true, script: "sfdx force:auth:jwt:grant --clientid ${fpac1_Key} --username ${ORG_USRNAME} --jwtkeyfile C:/Jenkins/workspace/SFDX_CICD_Feature1/server.key --setdefaultdevhubusername --instanceurl https://login.salesforce.com" 
		rc = sh returnStdout: true, script: "sfdx force:source:deploy -p C:/Jenkins/workspace/SFDX_CICD_Feature1/SF_Deploy -u ${ORG_USRNAME} -w 5"
try {	
	stage('Runing Apex Test ${params.SANDBOX}') {
		sh "mkdir -p ${RUN_ARTIFACT_DIR}"
				timeout(time: 180, unit: 'SECONDS') {
				rc = sh returnStatus: true, script: "sfdx force:apex:test:run --testlevel RunLocalTests --outputdir ${RUN_ARTIFACT_DIR} --resultformat tap --targetusername ${ORG_USRNAME}"
				}
	}
}  catch (Exception e) {
			echo "Apex Test Run Failed"
			junit keepLongStdio: true, testResults: 'tests/**/*-junit.xml'	
	}
if (isUnix()) {
			rc = sh returnStatus: true, script: "sfdx force:auth:logout --targetusername ${ORG_USRNAME} -p"
				if (rc != 0) { error 'UAT Org Logout Failed' }
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}else if ("${params.SANDBOX}" == 'Sandbox2') {
		echo "Sanbox = ${params.SANDBOX} Deploy code to Sandbox2"
		echo "Building from Last Commit on Branch ${env.BRANCH_NAME}"
		rc = sh returnStatus: true, script: "sfdx force:auth:jwt:grant --clientid ${fpac1_Key} --username ${ORG_USRNAME} --jwtkeyfile C:/Jenkins/workspace/SFDX_CICD_Feature1/server.key --setdefaultdevhubusername --instanceurl https://login.salesforce.com" 
		rc = sh returnStdout: true, script: "sfdx force:source:deploy -p C:/Jenkins/workspace/SFDX_CICD_Feature1/SF_Deploy -u ${ORG_USRNAME} -w 5"
		echo "Deploying Code to Dev; Sandbox = ${params.SANDBOX}"
try {	
	stage('Runing Apex Test in ${params.SANDBOX}') {
		sh "mkdir -p ${RUN_ARTIFACT_DIR}"
				timeout(time: 180, unit: 'SECONDS') {
				rc = sh returnStatus: true, script: "sfdx force:apex:test:run --testlevel RunLocalTests --outputdir ${RUN_ARTIFACT_DIR} --resultformat tap --targetusername ${ORG_USRNAME}"
				}
	}
}  catch (Exception e) {
			echo "Apex Test Run Failed"
			junit keepLongStdio: true, testResults: 'tests/**/*-junit.xml'	
	}
if (isUnix()) {
			rc = sh returnStatus: true, script: "sfdx force:auth:logout --targetusername ${ORG_USRNAME} -p"
				if (rc != 0) { error 'QA Org Logout Failed' }
    }
} //End of else If
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            } // End of With Credentials 
	} // End Build and Deploy
echo "Building from Last Commit on Branch ${env.BRANCH_NAME}"
			} // End Else condition
		} //End Script Condition
	} //End of CICD Branch and Enviorment Verification
} //End of Node
